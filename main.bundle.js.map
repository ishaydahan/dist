{"version":3,"sources":["C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src async","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/answer-list.component.html","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/answer-list.component.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/answer.service.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/answer.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/app.component.css","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/app.component.html","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/app.component.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/app.module.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/question-list.component.html","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/question-list.component.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/question.service.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/question.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/test-list.component.html","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/test-list.component.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/test.service.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/test.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/environments/environment.ts","C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../../../../src async recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src async\n// module id = ../../../../../src async recursive\n// module chunks = 1","module.exports = \"<div class=\\\"answer-content\\\">\\n  <h1 class=\\\"page-title\\\">{{this.appComponent.questionString}}</h1>\\n  <h3 class=\\\"page-title\\\">Add Answer:</h3>\\n  <div class=\\\"answer-create\\\">\\n\\n    <form #answerForm=\\\"ngForm\\\" novalidate>\\n      <input type=\\\"text\\\" id=\\\"title\\\" class=\\\"form-control\\\" placeholder=\\\"Type an answer\\\"\\n             required\\n             name=\\\"title\\\" [(ngModel)]=\\\"newAnswer.content\\\"\\n             #title=\\\"ngModel\\\" >\\n      <input type=\\\"number\\\" id=\\\"grade\\\" class=\\\"form-control\\\" placeholder=\\\"Type a grade [0-100] or leave empty for student\\\"\\n             name=\\\"title\\\" [(ngModel)]=\\\"tempGrade\\\"\\n             #title=\\\"ngModel\\\" >\\n      <div class=\\\"answer-buttons\\\">\\n        <button (click)= \\\"createAnswer(answerForm)\\\" [disabled]=\\\"!title.valid\\\" md-raised-button color=\\\"primary\\\">Add Answer</button>\\n        <div class=\\\"divider\\\"></div>\\n        <button (click)=\\\"checkQuestion()\\\" md-raised-button color=\\\"primary\\\">Check Question</button>\\n        <simple-notifications [options]=\\\"options\\\"></simple-notifications>\\n        <div class=\\\"divider\\\"></div>\\n        <button (click)=\\\"goBack()\\\" md-raised-button color=\\\"primary\\\">Go back</button>\\n      </div>\\n    </form>\\n  </div>\\n\\n\\n\\n  <h3 class=\\\"page-title\\\">All Answers:</h3>\\n  <ul class=\\\"answer-list\\\">\\n    <li *ngFor=\\\"let answer of answers\\\"  >\\n      <div class=\\\"answer-row-good\\\" *ngIf=\\\"(!editing || editingAnswer.id != answer.id) && answer.grade>=50\\\">\\n        <span class=\\\"answer-prop\\\">\\n            <a title=\\\"WRITER\\\">\\n              <i class=\\\"material-icons person\\\" *ngIf=\\\"answer.writer==='TEACHER'\\\">person</i>\\n              <i class=\\\"material-icons school\\\" *ngIf=\\\"answer.writer==='STUDENT'\\\">school</i>\\n            </a>\\n            <a title=\\\"IS VERIFIED\\\">\\n              <i class=\\\"material-icons done_all\\\" *ngIf=\\\"answer.verified\\\">done_all</i>\\n              <i class=\\\"material-icons priority_high\\\" *ngIf=\\\"!answer.verified\\\">priority_high</i>\\n            </a>\\n        </span>\\n        <span class=\\\"answer-title\\\">\\n          {{answer.content}} {{answer.grade>-1 ? '(' + answer.grade/100 + ')' : ''}}\\n        </span>\\n        <span class=\\\"answer-actions\\\">\\n          <a (click)=\\\"approveAnswer(answer)\\\" title=\\\"APPROVE\\\" *ngIf=\\\"answer.grade>-1\\\">\\n            <i class=\\\"material-icons done\\\">done</i>\\n          </a>\\n          <a (click)=\\\"editAnswer(answer)\\\" title=\\\"EDIT GRADE\\\">\\n            <i class=\\\"material-icons edit\\\">edit</i>\\n          </a>\\n          <a (click)=\\\"deleteAnswer(answer.id)\\\" title=\\\"DELETE\\\">\\n            <i class=\\\"material-icons delete\\\">clear</i>\\n          </a>\\n           <jaspero-confirmations [defaultSettings]=\\\"options2\\\"></jaspero-confirmations>\\n        </span>\\n      </div>\\n      <div class=\\\"answer-row-bad\\\" *ngIf=\\\"(!editing || editingAnswer.id != answer.id)&& answer.grade<50 && answer.grade>-1\\\">\\n        <span class=\\\"answer-prop\\\">\\n            <a title=\\\"WRITER\\\">\\n              <i class=\\\"material-icons person\\\" *ngIf=\\\"answer.writer==='TEACHER'\\\">person</i>\\n              <i class=\\\"material-icons school\\\" *ngIf=\\\"answer.writer==='STUDENT'\\\">school</i>\\n            </a>\\n            <a title=\\\"IS VERIFIED\\\">\\n              <i class=\\\"material-icons done_all\\\" *ngIf=\\\"answer.verified\\\">done_all</i>\\n              <i class=\\\"material-icons priority_high\\\" *ngIf=\\\"!answer.verified\\\">priority_high</i>\\n            </a>\\n        </span>\\n        <span class=\\\"answer-title\\\">\\n          {{answer.content}} {{answer.grade>-1 ? '(' + answer.grade/100 + ')' : ''}}\\n        </span>\\n        <span class=\\\"answer-actions\\\">\\n                <a (click)=\\\"approveAnswer(answer)\\\" *ngIf=\\\"answer.grade>-1\\\">\\n                \\t<i class=\\\"material-icons done\\\">done</i>\\n                </a>\\n                <a (click)=\\\"editAnswer(answer)\\\">\\n                \\t<i class=\\\"material-icons edit\\\">edit</i>\\n                </a>\\n                <a (click)=\\\"deleteAnswer(answer.id)\\\">\\n                \\t<i class=\\\"material-icons delete\\\">clear</i>\\n                </a>\\n           <jaspero-confirmations [defaultSettings]=\\\"options2\\\"></jaspero-confirmations>\\n            </span>\\n      </div>\\n\\n      <div class=\\\"answer-row-ungraded\\\" *ngIf=\\\"(!editing || editingAnswer.id != answer.id) && answer.grade<0\\\">\\n        <span class=\\\"answer-prop\\\">\\n            <a title=\\\"WRITER\\\">\\n              <i class=\\\"material-icons person\\\" *ngIf=\\\"answer.writer==='TEACHER'\\\">person</i>\\n              <i class=\\\"material-icons school\\\" *ngIf=\\\"answer.writer==='STUDENT'\\\">school</i>\\n            </a>\\n        </span>\\n        <span class=\\\"answer-title\\\">\\n          {{answer.content}} {{answer.grade>-1 ? '(' + answer.grade/100 + ')' : ''}}\\n        </span>\\n        <span class=\\\"answer-actions\\\">\\n                <a (click)=\\\"editAnswer(answer)\\\">\\n                \\t<i class=\\\"material-icons edit\\\">edit</i>\\n                </a>\\n                <a (click)=\\\"deleteAnswer(answer.id)\\\">\\n                \\t<i class=\\\"material-icons delete\\\">clear</i>\\n                </a>\\n           <jaspero-confirmations [defaultSettings]=\\\"options2\\\"></jaspero-confirmations>\\n            </span>\\n      </div>\\n\\n\\n      <div class=\\\"answer-edit\\\" *ngIf=\\\"editing && editingAnswer.id === answer.id\\\">\\n        <input class=\\\"form-control\\\" type=\\\"text\\\"\\n               [(ngModel)]=\\\"editingAnswer.grade\\\" required>\\n        <span class=\\\"edit-actions\\\">\\n                <a (click)=\\\"updateAnswer(editingAnswer)\\\">\\n                  <i class=\\\"material-icons\\\">done</i>\\n                </a>\\n                <a (click)=\\\"clearEditing()\\\">\\n                  <i class=\\\"material-icons\\\">clear</i>\\n                </a>\\n            </span>\\n      </div>\\n    </li>\\n  </ul>\\n  <div class=\\\"no-answers\\\" *ngIf=\\\"answers && answers.length == 0\\\">\\n    <p>No Answers Found!</p>\\n  </div>\\n</div>\\n\\n\\n<!--<div class=\\\"answer-content\\\">-->\\n    <!--<h1 class=\\\"page-title\\\">{{this.appComponent.answerString + '?'}}</h1>-->\\n    <!--<h3 class=\\\"page-title\\\">Add Answer:</h3>-->\\n  <!--<div class=\\\"answer-create\\\">-->\\n      <!--<form #answerForm=\\\"ngForm\\\" (ngSubmit) = \\\"createAnswer(answerForm)\\\" novalidate>-->\\n    \\t\\t<!--<input type=\\\"text\\\" id=\\\"title\\\" class=\\\"form-control\\\" placeholder=\\\"Type an answer\\\"-->\\n    \\t\\t       <!--required-->\\n    \\t\\t       <!--name=\\\"title\\\" [(ngModel)]=\\\"newAnswer.content\\\"-->\\n    \\t\\t       <!--#title=\\\"ngModel\\\" >-->\\n        <!--<input type=\\\"number\\\" id=\\\"grade\\\" class=\\\"form-control\\\" placeholder=\\\"Type a grade or leave empty for student ans\\\"-->\\n               <!--name=\\\"grade\\\" [(ngModel)]=\\\"tempGrade\\\"-->\\n               <!--#title=\\\"ngModel\\\" >-->\\n\\n        <!--<div align=\\\"center\\\">-->\\n          <!--<button type=\\\"submit\\\" md-raised-button color=\\\"primary\\\">SUBMIT</button>-->\\n\\n        <!--</div>-->\\n        <!--<h3 class=\\\"page-title\\\">All Answers:</h3>-->\\n\\n    \\t\\t<!--<div *ngIf=\\\"title.errors && title.dirty\\\"-->\\n    \\t\\t     <!--class=\\\"alert alert-danger\\\">-->\\n    \\t\\t    <!--<div [hidden]=\\\"!title.errors.required\\\">-->\\n    \\t\\t      <!--Title is required.-->\\n    \\t\\t    <!--</div>-->\\n    \\t\\t<!--</div>-->\\n    \\t<!--</form>-->\\n    <!--</div>-->\\n    <!--<ul class=\\\"answer-list\\\">-->\\n      <!--<li *ngFor=\\\"let answer of answers\\\"  >-->\\n        <!--<div class=\\\"answer-row\\\" *ngIf=\\\"!editing || editingAnswer.id != answer.id\\\">-->\\n\\n\\n                      <!--&lt;!&ndash;<span class=\\\"answer-title\\\" *ngIf=\\\"answer.grade>=50\\\">&ndash;&gt;-->\\n                            <!--&lt;!&ndash;<p>{{answer.content}} - {{answer.grade>-1 ? answer.grade/100 : 'Ungraded'}}</p>&ndash;&gt;-->\\n                      <!--&lt;!&ndash;</span>&ndash;&gt;-->\\n                      <!--<span class=\\\"answer-title\\\" *ngIf=\\\"answer.grade<50 && answer.grade>-1\\\">-->\\n                            <!--<p>{{answer.content}} - {{answer.grade>-1 ? answer.grade/100 : 'Ungraded'}}</p>-->\\n                      <!--</span>-->\\n                      <!--&lt;!&ndash;<span class=\\\"answer-title-ungraded\\\" *ngIf=\\\"answer.grade<0\\\">&ndash;&gt;-->\\n                            <!--&lt;!&ndash;<p>{{answer.content}} - {{answer.grade>-1 ? answer.grade/100 : 'Ungraded'}}</p>&ndash;&gt;-->\\n                      <!--&lt;!&ndash;</span>&ndash;&gt;-->\\n\\n\\n          <!--<span class=\\\"answer-actions\\\">-->\\n                <!--<a (click)=\\\"editAnswer(answer)\\\">-->\\n                \\t<!--<i class=\\\"material-icons edit\\\">edit</i>-->\\n                <!--</a>-->\\n                <!--<a (click)=\\\"approveAnswer(answer)\\\">-->\\n                \\t<!--<i class=\\\"material-icons done\\\">done</i>-->\\n                <!--</a>-->\\n                <!--<a (click)=\\\"deleteAnswer(answer.id)\\\">-->\\n                \\t<!--<i class=\\\"material-icons delete\\\">clear</i>-->\\n                <!--</a>-->\\n            <!--</span>-->\\n        <!--</div>-->\\n        <!--<div class=\\\"answer-edit\\\" *ngIf=\\\"editing && editingAnswer.id === answer.id\\\">-->\\n            <!--<input class=\\\"form-control\\\" type=\\\"number\\\"-->\\n                 <!--[(ngModel)]=\\\"editingAnswer.grade\\\" required>-->\\n            <!--<span class=\\\"edit-actions\\\">-->\\n                <!--<a (click)=\\\"updateAnswer(editingAnswer)\\\">-->\\n                  <!--<i class=\\\"material-icons\\\">done</i>-->\\n                <!--</a>-->\\n                <!--<a (click)=\\\"clearEditing()\\\">-->\\n                  <!--<i class=\\\"material-icons\\\">clear</i>-->\\n                <!--</a>-->\\n            <!--</span>-->\\n        <!--</div>-->\\n      <!--</li>-->\\n    <!--</ul>-->\\n    <!--<div class=\\\"no-answers\\\" *ngIf=\\\"answers && answers.length == 0\\\">-->\\n        <!--<p>No Answers Found!</p>-->\\n    <!--</div>-->\\n<!--</div>-->\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/answer-list.component.html\n// module id = ../../../../../src/app/answer-list.component.html\n// module chunks = 1","import { Component, Input, OnInit } from '@angular/core';\nimport { AnswerService } from './answer.service';\nimport { Answer } from './answer';\nimport {NgForm} from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { MdButtonModule } from '@angular/material';\nimport { NotificationsService } from 'angular2-notifications';\nimport { ConfirmationService  } from '@jaspero/ng2-confirmations';\n\nexport interface ResolveEmit {\n  // Returns this if modal resolved with yes or no\n  resolved?: boolean;\n  // If the modal was closed in some other way this is removed\n  closedWithOutResolving?: string;\n}\n\n@Component({\n  selector: 'answer-list',\n  templateUrl: './answer-list.component.html'\n})\n\n\nexport class AnswerListComponent implements OnInit {\n    answers: Answer[];\n    newAnswer: Answer = new Answer();\n    editing = false;\n    editingAnswer: Answer = new Answer();\n    public tempGrade = null;\n    constructor(\n      private answerService: AnswerService,\n      public appComponent: AppComponent,\n      private _service: NotificationsService\n      , public _confirmation: ConfirmationService\n\n    ) {}\n\n  public options = {\n    position: [\"bottom\", \"right\"],\n    timeOut: 5000,\n    lastOnBottom: true,\n  };\n  public options2 = {\n    overlay: true,\n    overlayClickToClose: true,\n    showCloseButton: false,\n    confirmText: '',\n    declineText: 'Yes'\n  }\n\n    ngOnInit(): void {\n      this.getAnswers();\n    }\n\n    getAnswers(): void {\n      this.answerService.getAnswers(this.appComponent.test, this.appComponent.question)\n        .then(answers => this.answers = answers );\n    }\n\n    createAnswer(answerForm: NgForm): void {\n      if (this.tempGrade === null) {\n        this.newAnswer.grade = -2;\n        this.newAnswer.writer = 'STUDENT';\n      }else {\n        this.newAnswer.grade = this.tempGrade;\n        this.newAnswer.writer = 'TEACHER';\n      }\n      this.answerService.createAnswer(this.appComponent.test, this.appComponent.question, this.newAnswer)\n        .then(createAnswer => {\n          answerForm.reset();\n          this.newAnswer = new Answer();\n          this.answers.unshift(createAnswer)\n        });\n    }\n\n    deleteAnswer(id: string): void {\n      if(confirm(\"Are you sure?\")) {\n            this.answerService.deleteAnswer(this.appComponent.test, this.appComponent.question, id)\n              .then(() => {\n                this.answers = this.answers.filter(answer => answer.id !== id);\n              });\n          }\n    }\n\n    updateAnswer(answerData: Answer): void {\n      console.log(answerData);\n      this.answerService.updateAnswer(this.appComponent.test, this.appComponent.question, answerData)\n      .then(updatedAnswer => {\n        let existingAnswer = this.answers.find(answer => answer.id === updatedAnswer.id);\n        Object.assign(existingAnswer, updatedAnswer);\n        this.clearEditing();\n      });\n    }\n\n    editAnswer(answerData: Answer): void {\n      this.editing = true;\n      Object.assign(this.editingAnswer, answerData);\n    }\n\n  approveAnswer(answerData: Answer): void {\n    answerData.verified = true;\n    this.answerService.updateAnswer(this.appComponent.test, this.appComponent.question, answerData)\n      .then(updatedAnswer => {\n        let existingAnswer = this.answers.find(answer => answer.id === updatedAnswer.id);\n        Object.assign(existingAnswer, updatedAnswer);\n      });\n  }\n\n  clearEditing(): void {\n      this.editingAnswer = new Answer();\n      this.tempGrade = null;\n      this.editing = false;\n    }\n\n  goBack(): void {\n    this.appComponent.question = null;\n    this.appComponent.questionString = null;\n    this.appComponent.mode = 2;\n  }\n\n  checkQuestion(): void {\n    this._service.info(\n      'Checking Question',\n      'It may take some time...',\n      {\n        showProgressBar: true,\n        pauseOnHover: true,\n        clickToClose: true,\n        maxLength: 50\n      }\n    )\n\n    this.answerService.checkQuestion(this.appComponent.test, this.appComponent.question)\n      .then(x=>{\n          this._service.success(\n            'Done!',\n            'grades loading...',\n            {\n              showProgressBar: true,\n              pauseOnHover: true,\n              clickToClose: true,\n              maxLength: 50\n            }\n          )\n        this.getAnswers();\n        }\n      ).catch(x=>{\n        this._service.error(\n          'Error!',\n          'please report...',\n          {\n            showProgressBar: true,\n            pauseOnHover: true,\n            clickToClose: true,\n            maxLength: 50\n          }\n        )\n        this.getAnswers();\n      }\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/answer-list.component.ts","import { Injectable } from '@angular/core';\nimport { Answer } from './answer';\nimport { Headers, Http } from '@angular/http';\nimport 'rxjs/add/operator/toPromise';\n\n@Injectable()\nexport class AnswerService {\n  private baseUrl = 'http://localhost:8080';\n  // private baseUrl = 'http://bgucsproject.azurewebsites.net';\n\n  constructor(private http: Http) {\n  }\n\n  getAnswers(tid: string, qid: string):  Promise<Answer[]> {\n    return this.http.get(this.baseUrl + '/api/tests/' + tid + '/questions/' + qid + '/answers/')\n      .toPromise()\n      .then(response => response.json() as Answer[])\n      .catch(this.handleError);\n  }\n\n  createAnswer(tid: string, qid: string,  answerData: Answer): Promise<Answer> {\n    return this.http.post(this.baseUrl + '/api/tests/' + tid + '/questions/'  + qid + '/answers/', answerData)\n      .toPromise().then(response => response.json() as Answer)\n      .catch(this.handleError);\n  }\n\n  updateAnswer(tid: string, qid: string, answerData: Answer): Promise<Answer> {\n    return this.http.put(this.baseUrl + '/api/tests/' + tid + '/questions/'  + qid + '/answers/' + answerData.id, answerData)\n      .toPromise()\n      .then(response => response.json() as Answer)\n      .catch(this.handleError);\n  }\n\n  deleteAnswer(tid: string, qid: string, id: string): Promise<any> {\n    return this.http.delete(this.baseUrl + '/api/tests/' + tid + '/questions/' + qid + '/answers/' + id)\n      .toPromise()\n      .catch(this.handleError);\n  }\n\n  private handleError(error: any): Promise<any> {\n    console.error('Some error occured', error);\n    return Promise.reject(error.message || error);\n  }\n\n  checkQuestion(tid: string, id: string):  Promise<any> {\n    return this.http.get(this.baseUrl + '/api/tests/' + tid + '/questions/' + id + '/check')\n      .toPromise()\n      .then(response => {})\n      .catch(this.handleError);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/answer.service.ts","export class Answer {\n  id: string;\n  qid: string;\n  content: string;\n  writer: string;\n  writerId: string;\n  grade: number;\n  verified: boolean;\n  setSyntaxMatchFound: boolean;\n  createdAt: Date;\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/answer.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = 1","module.exports = \"<main>\\n  <test-list *ngIf=\\\"mode===1\\\"></test-list>\\n  <question-list *ngIf=\\\"mode===2\\\"></question-list>\\n  <answer-list *ngIf=\\\"mode===3\\\"></answer-list>\\n</main>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = 1","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor() {\n\n  }\n\n  title = 'app';\n  public mode = 1;\n  test: string;\n  question: string;\n  testString: string;\n  questionString: string;\n}\n\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { TestListComponent } from './test-list.component';\nimport { TestService } from './test.service';\nimport { QuestionListComponent } from './question-list.component';\nimport { QuestionService } from './question.service';\nimport { AnswerListComponent } from './answer-list.component';\nimport { AnswerService } from './answer.service';\nimport { MdButtonModule } from '@angular/material';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { SimpleNotificationsModule } from 'angular2-notifications';\nimport { JasperoConfirmationsModule  } from '@jaspero/ng2-confirmations';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TestListComponent,\n    QuestionListComponent,\n    AnswerListComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule,\n    MdButtonModule,\n    JasperoConfirmationsModule ,\n    SimpleNotificationsModule.forRoot(),\n    BrowserAnimationsModule\n  ],\n  providers: [TestService, QuestionService, AnswerService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/app.module.ts","module.exports = \"<div class=\\\"question-content\\\">\\n  <h1 class=\\\"page-title\\\">{{this.appComponent.testString}}</h1>\\n  <h3 class=\\\"page-title\\\">Add Question:</h3>\\n    <div class=\\\"question-create\\\">\\n      <form #questionForm=\\\"ngForm\\\" novalidate>\\n        <input type=\\\"text\\\" id=\\\"title\\\" class=\\\"form-control\\\" placeholder=\\\"Type a question\\\"\\n               required\\n               name=\\\"title\\\" [(ngModel)]=\\\"newQuestion.content\\\"\\n               #title=\\\"ngModel\\\" >\\n        <div class=\\\"question-buttons\\\">\\n          <button  (click) = \\\"createQuestion(questionForm)\\\" [disabled]=\\\"!title.valid\\\" md-raised-button color=\\\"primary\\\">Add Question</button>\\n          <div class=\\\"divider\\\"></div>\\n          <button (click)=\\\"checkTest()\\\" md-raised-button color=\\\"primary\\\">Check Test</button>\\n            <simple-notifications [options]=\\\"options\\\"></simple-notifications>\\n          <div class=\\\"divider\\\"></div>\\n          <button (click)=\\\"goBack()\\\" md-raised-button color=\\\"primary\\\">Go back</button>\\n        </div>\\n      </form>\\n    </div>\\n  <h3 class=\\\"page-title\\\">All Questions:</h3>\\n  <ul class=\\\"question-list\\\">\\n      <li *ngFor=\\\"let question of questions\\\"  >\\n        <div class=\\\"question-row\\\" *ngIf=\\\"!editing || editingQuestion.id != question.id\\\">\\n                      <span class=\\\"question-title\\\">\\n            \\t{{question.content}}\\n            </span>\\n            <span class=\\\"question-actions\\\">\\n                <a (click)=\\\"editQuestion(question)\\\">\\n                \\t<i class=\\\"material-icons edit\\\">edit</i>\\n                </a>\\n                <a (click)=\\\"buildQuestion(question)\\\">\\n                \\t<i class=\\\"material-icons build\\\">build</i>\\n                </a>\\n                <a (click)=\\\"deleteQuestion(question.id)\\\">\\n                \\t<i class=\\\"material-icons delete\\\">clear</i>\\n                </a>\\n                <jaspero-confirmations [defaultSettings]=\\\"options2\\\"></jaspero-confirmations>\\n\\n            </span>\\n        </div>\\n        <div class=\\\"question-edit\\\" *ngIf=\\\"editing && editingQuestion.id === question.id\\\">\\n            <input class=\\\"form-control\\\" type=\\\"text\\\"\\n             [(ngModel)]=\\\"editingQuestion.content\\\" required>\\n            <span class=\\\"edit-actions\\\">\\n                <a (click)=\\\"updateQuestion(editingQuestion)\\\">\\n                  <i class=\\\"material-icons\\\">done</i>\\n                </a>\\n                <a (click)=\\\"clearEditing()\\\">\\n                  <i class=\\\"material-icons\\\">clear</i>\\n                </a>\\n            </span>\\n        </div>\\n      </li>\\n    </ul>\\n    <div class=\\\"no-questions\\\" *ngIf=\\\"questions && questions.length == 0\\\">\\n        <p>No Questions Found!</p>\\n    </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/question-list.component.html\n// module id = ../../../../../src/app/question-list.component.html\n// module chunks = 1","import { Component, Input, OnInit } from '@angular/core';\nimport { QuestionService } from './question.service';\nimport { Question } from './question';\nimport {NgForm} from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { NotificationsService } from 'angular2-notifications';\nimport { ConfirmationService  } from '@jaspero/ng2-confirmations';\n\nexport interface ResolveEmit {\n  // Returns this if modal resolved with yes or no\n  resolved?: boolean;\n  // If the modal was closed in some other way this is removed\n  closedWithOutResolving?: string;\n}\n\n@Component({\n  selector: 'question-list',\n  templateUrl: './question-list.component.html'\n})\n\nexport class QuestionListComponent implements OnInit {\n    questions: Question[];\n    newQuestion: Question = new Question();\n    editing = false;\n    editingQuestion: Question = new Question();\n\n    constructor(\n      private questionService: QuestionService,\n      public appComponent: AppComponent,\n      private _service: NotificationsService\n      , public _confirmation: ConfirmationService\n    ) {}\n\n  public options = {\n    position: [\"bottom\", \"right\"],\n    timeOut: 5000,\n    lastOnBottom: true,\n  };\n  public options2 = {\n    overlay: true,\n    overlayClickToClose: true,\n    showCloseButton: false,\n    confirmText: '',\n    declineText: 'Yes'\n  }\n\n    ngOnInit(): void {\n      this.getQuestions();\n    }\n\n    getQuestions(): void {\n      this.questionService.getQuestions(this.appComponent.test)\n        .then(questions => this.questions = questions );\n    }\n\n    createQuestion(questionForm: NgForm): void {\n      this.questionService.createQuestion(this.appComponent.test, this.newQuestion)\n        .then(createQuestion => {\n          questionForm.reset();\n          this.newQuestion = new Question();\n          this.questions.unshift(createQuestion)\n        });\n    }\n\n    deleteQuestion(id: string): void {\n      if(confirm(\"Are you sure?\")) {\n        this.questionService.deleteQuestion(this.appComponent.test, id)\n          .then(() => {\n            this.questions = this.questions.filter(question => question.id !== id);\n          });\n      }\n    }\n\n    updateQuestion(questionData: Question): void {\n      console.log(questionData);\n      this.questionService.updateQuestion(this.appComponent.test, questionData)\n      .then(updatedQuestion => {\n        let existingQuestion = this.questions.find(question => question.id === updatedQuestion.id);\n        Object.assign(existingQuestion, updatedQuestion);\n        this.clearEditing();\n      });\n    }\n\n    editQuestion(questionData: Question): void {\n      this.editing = true;\n      Object.assign(this.editingQuestion, questionData);\n    }\n\n    clearEditing(): void {\n      this.editingQuestion = new Question();\n      this.editing = false;\n    }\n\n    buildQuestion(question: Question): void {\n      this.appComponent.question = question.id;\n      this.appComponent.questionString = question.content;\n      this.appComponent.mode = 3;\n    }\n\n  checkTest(): void {\n    this._service.info(\n      'Checking Test',\n      'It may take some time...',\n      {\n        showProgressBar: true,\n        pauseOnHover: true,\n        clickToClose: true,\n        maxLength: 50\n      }\n    )\n\n    this.questionService.checkTest(this.appComponent.test)\n      .then(x=>{\n        this._service.success(\n          'Done!',\n          'grades loading...',\n          {\n            showProgressBar: true,\n            pauseOnHover: true,\n            clickToClose: true,\n            maxLength: 50\n          }\n        )\n\n      });\n  }\n\n  goBack(): void {\n    this.appComponent.test = null;\n    this.appComponent.testString = null;\n    this.appComponent.mode = 1;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/question-list.component.ts","import { Injectable } from '@angular/core';\nimport { Question } from './question';\nimport { Headers, Http } from '@angular/http';\nimport 'rxjs/add/operator/toPromise';\n\n@Injectable()\nexport class QuestionService {\n  private baseUrl = 'http://localhost:8080';\n  // private baseUrl = 'http://bgucsproject.azurewebsites.net';\n\n  constructor(private http: Http) {\n  }\n\n  getQuestions(tid: string):  Promise<Question[]> {\n    return this.http.get(this.baseUrl + '/api/tests/' + tid + '/questions/')\n      .toPromise()\n      .then(response => response.json() as Question[])\n      .catch(this.handleError);\n  }\n\n  createQuestion(tid: string, questionData: Question): Promise<Question> {\n    return this.http.post(this.baseUrl + '/api/tests/' + tid + '/questions/', questionData)\n      .toPromise().then(response => response.json() as Question)\n      .catch(this.handleError);\n  }\n\n  updateQuestion(tid: string, questionData: Question): Promise<Question> {\n    return this.http.put(this.baseUrl + '/api/tests/' + tid + '/questions/' + questionData.id, questionData)\n      .toPromise()\n      .then(response => response.json() as Question)\n      .catch(this.handleError);\n  }\n\n  deleteQuestion(tid: string, id: string): Promise<any> {\n    return this.http.delete(this.baseUrl + '/api/tests/' + tid + '/questions/' + id)\n      .toPromise()\n      .catch(this.handleError);\n  }\n\n  private handleError(error: any): Promise<any> {\n    console.error('Some error occured', error);\n    return Promise.reject(error.message || error);\n  }\n\n  checkTest(tid: string):  Promise<any> {\n    return this.http.get(this.baseUrl + '/api/tests/' + tid + '/check')\n      .toPromise()\n      .then(response => {})\n      .catch(this.handleError);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/question.service.ts","export class Question {\n  id: string;\n  tid: string;\n  content: string;\n  questions: Array<string>;\n  createdAt: Date;\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/question.ts","module.exports = \"<div class=\\\"test-content\\\">\\n    <h1 class=\\\"page-title\\\">My Tests</h1>\\n    <div class=\\\"test-create\\\">\\n      <form #testForm=\\\"ngForm\\\" novalidate>\\n    \\t\\t<input type=\\\"text\\\" id=\\\"title\\\" class=\\\"form-control\\\" placeholder=\\\"Give a name to this Test\\\"\\n    \\t\\t       required\\n    \\t\\t       name=\\\"title\\\" [(ngModel)]=\\\"newTest.content\\\"\\n    \\t\\t       #title=\\\"ngModel\\\" >\\n        <div class=\\\"test-buttons\\\">\\n          <button  (click) = \\\"createTest(testForm)\\\" [disabled]=\\\"!title.valid\\\" md-raised-button color=\\\"primary\\\">Add Test</button>\\n        </div>\\n      </form>\\n    </div>\\n    <ul class=\\\"test-list\\\">\\n      <li *ngFor=\\\"let test of tests\\\"  >\\n        <div class=\\\"test-row\\\" *ngIf=\\\"!editing || editingTest.id != test.id\\\">\\n                      <span class=\\\"test-title\\\">\\n            \\t{{test.content}}\\n            </span>\\n            <span class=\\\"test-actions\\\">\\n                <a (click)=\\\"editTest(test)\\\">\\n                \\t<i class=\\\"material-icons edit\\\">edit</i>\\n                </a>\\n                <a (click)=\\\"buildTest(test)\\\">\\n                \\t<i class=\\\"material-icons build\\\">build</i>\\n                </a>\\n                <a (click)=\\\"deleteTest(test.id)\\\">\\n                \\t<i class=\\\"material-icons delete\\\">clear</i>\\n                </a>\\n                <jaspero-confirmations [defaultSettings]=\\\"options2\\\"></jaspero-confirmations>\\n\\n            </span>\\n        </div>\\n        <div class=\\\"test-edit\\\" *ngIf=\\\"editing && editingTest.id === test.id\\\">\\n            <input class=\\\"form-control\\\" type=\\\"text\\\"\\n             [(ngModel)]=\\\"editingTest.content\\\" required>\\n            <span class=\\\"edit-actions\\\">\\n                <a (click)=\\\"updateTest(editingTest)\\\">\\n                  <i class=\\\"material-icons\\\">done</i>\\n                </a>\\n                <a (click)=\\\"clearEditing()\\\">\\n                  <i class=\\\"material-icons\\\">clear</i>\\n                </a>\\n            </span>\\n        </div>\\n      </li>\\n    </ul>\\n    <div class=\\\"no-tests\\\" *ngIf=\\\"tests && tests.length == 0\\\">\\n        <p>No Tests Found!</p>\\n    </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/test-list.component.html\n// module id = ../../../../../src/app/test-list.component.html\n// module chunks = 1","import { Component, Input, OnInit } from '@angular/core';\nimport { TestService } from './test.service';\nimport { Test } from './test';\nimport {NgForm} from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { ConfirmationService  } from '@jaspero/ng2-confirmations';\n\nexport interface ResolveEmit {\n  // Returns this if modal resolved with yes or no\n  resolved?: boolean;\n  // If the modal was closed in some other way this is removed\n  closedWithOutResolving?: string;\n}\n\n@Component({\n  selector: 'test-list',\n  templateUrl: './test-list.component.html'\n})\n\n\nexport class TestListComponent implements OnInit {\n    tests: Test[];\n    newTest: Test = new Test();\n    editing = false;\n    editingTest: Test = new Test();\n    constructor(private testService: TestService\n      , private appComponent: AppComponent\n      , public _confirmation: ConfirmationService\n    ) {\n    }\n\n  public options2 = {\n  overlay: true,\n  overlayClickToClose: true,\n  showCloseButton: false,\n  confirmText: '',\n  declineText: 'Yes'\n}\n\n\n    ngOnInit(): void {\n      this.getTests();\n    }\n\n    getTests(): void {\n      this.testService.getTests()\n        .then(tests => this.tests = tests );\n    }\n\n    createTest(testForm: NgForm): void {\n      this.testService.createTest(this.newTest)\n        .then(createTest => {\n          testForm.reset();\n            this.newTest = new Test();\n            this.tests.unshift(createTest)\n        });\n    }\n\n    deleteTest(id: string): void {\n      if(confirm(\"Are you sure?\")) {\n            this.testService.deleteTest(id)\n              .then(() => {\n                this.tests = this.tests.filter(test => test.id != id);\n              });\n          }\n    }\n\n    updateTest(testData: Test): void {\n      console.log(testData);\n      this.testService.updateTest(testData)\n      .then(updatedTest => {\n        let existingTest = this.tests.find(test => test.id === updatedTest.id);\n        Object.assign(existingTest, updatedTest);\n        this.clearEditing();\n      });\n    }\n\n\n    editTest(testData: Test): void {\n      this.editing = true;\n      Object.assign(this.editingTest, testData);\n    }\n\n    clearEditing(): void {\n      this.editingTest = new Test();\n      this.editing = false;\n    }\n\n    buildTest(test: Test): void {\n      this.appComponent.test = test.id;\n      this.appComponent.testString = test.content;\n      this.appComponent.mode = 2;\n    }\n\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/test-list.component.ts","import { Injectable } from '@angular/core';\nimport { Test } from './test';\nimport { Headers, Http } from '@angular/http';\n\nimport 'rxjs/add/operator/toPromise';\n\n@Injectable()\nexport class TestService {\n  private baseUrl = 'http://localhost:8080';\n  // private baseUrl = 'http://bgucsproject.azurewebsites.net';\n\n  constructor(private http: Http) {}\n\n  getTests():  Promise<Test[]> {\n    return this.http.get(this.baseUrl + '/api/tests/')\n      .toPromise()\n      .then(response => response.json() as Test[])\n      .catch(this.handleError);\n  }\n\n  createTest(testData: Test): Promise<Test> {\n    return this.http.post(this.baseUrl + '/api/tests/', testData)\n      .toPromise().then(response => response.json() as Test)\n      .catch(this.handleError);\n  }\n\n\n  updateTest(testData: Test): Promise<Test> {\n    return this.http.put(this.baseUrl + '/api/tests/' + testData.id, testData)\n      .toPromise()\n      .then(response => response.json() as Test)\n      .catch(this.handleError);\n  }\n\n  deleteTest(id: string): Promise<any> {\n    return this.http.delete(this.baseUrl + '/api/tests/' + id)\n      .toPromise()\n      .catch(this.handleError);\n  }\n\n  private handleError(error: any): Promise<any> {\n    console.error('Some error occured', error);\n    return Promise.reject(error.message || error);\n  }\n\n  checkTest(tid: string):  Promise<Test[]> {\n    return this.http.get(this.baseUrl + '/api/tests/' + tid + '/check')\n      .toPromise()\n      .then(response => {})\n      .catch(this.handleError);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/test.service.ts","export class Test {\n  id: string;\n  content: string;\n  questions: Array<string>;\n  createdAt: Date;\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/app/test.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/isdahan/Documents/GitHub/CS_NLP_FINAL_PROJECT_FRONTEND/src/main.ts"],"sourceRoot":"webpack:///"}